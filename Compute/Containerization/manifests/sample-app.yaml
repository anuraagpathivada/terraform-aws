apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: frontend-20240401151539301400000019
      containers:
      - name: react-app
        image: anurapa/react-app:v1.0
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: backend-20240401151539301300000017
      containers:
      - name: flask-app
        image: anurapa/flask-app:v1.0
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
spec:
  selector:
    app: react-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: react-app-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:ap-south-1:023408401842:certificate/cb029a63-c5af-4d5e-b2bc-6bce0923f9ef"
spec:
  ingressClassName: "alb"
  rules:
  - host: sampleapp.a2suite.co.uk
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: react-app-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: flask-app-service
            port:
              number: 5000